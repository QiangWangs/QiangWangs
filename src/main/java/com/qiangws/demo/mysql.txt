MySQL优化、覆盖索引 、回表 、索引下推
覆盖索引:
explain的输出结果Extra字段为Using index时，能够触发索引覆盖。
将被查询的字段，建立到联合索引里去。
命中索引，索引叶子节点存储了主键id，通过索引树即可获取，无需回表，符合索引覆盖，效率较高。
不符合索引覆盖，需要再次通过id值扫描聚集索引获取字段，效率会降低。 解决由单列索引升级为联合索引
  利用覆盖所以加最左原则，减少对索引的维护,因为是覆盖，所以可以避免排序用到的临时文件。

回表查询:
先定位主键值，再定位行记录，它的性能较扫一遍索引树更低
聚集索引（主键或第一个唯一索引）就不会回表，普通索引就会回表。

索引下推:（Index condition pushdown）简称ICP
是一种优化数据库查询的技术，它利用了数据库索引的特性，在一定条件下，在索引层面就过滤掉不需要的数据，从而减少查询时需要访问的数据块，提高查询效率。
优点是减少了回表操作，即减少了访问磁盘的次数和需要传输的数据量，从而提高了查询效率和响应速度。
查询中所使用的索引类型和查询条件的限制，只有涉及到等值查询或范围查询的情况下，才能使用索引下推技术实现优化

SQL不走索引的原因：
1.索引字段用到了函数
2.连表的条件编码不一致
3.字段类型不一致，如String赋给了ID，会式调用cast方法
4.like不满足最左原则

聚簇索引
    创建规则:
        如果表设置了主键，则主键就是聚簇索引
        如果表没有主键，则会默认第一个NOT NULL，且唯一（UNIQUE）的列作为聚簇索引
        以上都没有，则会默认创建一个隐藏的row_id作为聚簇索引
    注意事项:
        InnoDB的聚簇索引的叶子节点存储的是行记录（其实是页结构，一个页包含多行数据），InnoDB必须要有至少一个聚簇索引。
        由此可见，使用聚簇索引查询会很快，因为可以直接定位到行记录。
        如果查询条件为主键（聚簇索引），则只需扫描一次B+树即可通过聚簇索引定位到要查找的行记录数据。
普通索引
    普通索引也叫二级索引，除聚簇索引外的索引，即非聚簇索引。
    InnoDB的普通索引叶子节点存储的是主键（聚簇索引）的值，而MyISAM的普通索引存储的是记录指针。
    叶子节点存储的是主键（聚簇索引）的值，而不是行记录

    如果查询条件为普通索引（非聚簇索引），需要扫描两次B+树。
    第一次扫描通过普通索引定位到聚簇索引的值。
    第二次扫描通过聚簇索引的值定位到要查找的行记录数据。

