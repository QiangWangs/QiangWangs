Mysql底层是以B+树实现的, 叶子节点存放的是key和value, 非叶子节点存放的是key, 叶子节点之间通过链表连接((双休链表)便于范围查询), 非叶子节点通过指针连接(减少顺序遍历时产生的随机I/O),
hash只适合单行查询, 因为hash表的key和value是放在一起的, 查询的时候, 先通过hash算法定位到key, 然后通过key定位到value,
如果查询的是多行, 则需要遍历整个hash表, 查询效率低, 因此不适合做多行查询. 和范围查询B树和hash表类似, 都是通过hash算法定位到key, 然后通过key定位到value, 不同的是, B树是非叶子
节点存放的是key, 叶子节点存放的是key和value, 因此B树适合做范围查询, 因为B树的非叶子节点存放
的是key, 叶子节点存放的是key和value, 因此通过非叶子节点定位到key, 然后通过key定位到value,这样就可以查询到范围的数据.

B+树是B树的改进版本, 非叶子节点只存放key, 叶子节点存放key和value, 因此B+树适合做多行查询, 因为B+树的非叶子节点存放的是key, 叶子节点存放的是key和value, 因此通过非叶子节点定位
到key, 然后通过key定位到value,这样就可以查询到范围的数据.





MVCC是通过版本链实现的, 版本链记录了事务的修改操作, 每个版本号对应一个版本, 版本号越大, 表示修改的时间越晚, 因此可以实现事务的隔离性.它是通过读取历史版本的数据，来降低并发事务冲突，从而提高并发性能的一种机制
LBCC是通过锁实现的, 锁分为共享锁和排他锁, 共享锁可以同时被多个事务持有, 排他锁只能被一个事务持有, 因此可以实现事务的隔离性.它是通过锁来控制并发事务冲突，从而提高并发性能的一种机制


 undolog回滚事务是通过回滚日志实现的, 回滚日志记录了事务的修改操作, 回滚的时候, 可以根据回滚日志执行回滚操作, 实现事务的回滚.
 undo log是存储在内存中的, redo log是存储在磁盘上的, 因此undo log的读写速度更快, 因此适合做事务的回滚.
 redo log是存储在磁盘上的, 因此适合做事务的提交和持久化.

 



21、如何查询慢 SQL 产生的原因
 分析 SQL 执行计划（explain extended），思考可能的优化点，是否命中索引等。
 没有索引或者没有用到索引(这是查询慢最常见的问题，是程序设计的缺陷)。
 内存不足。
 网络速度慢。
 是否查询出的数据量过大（可以采用多次查询，其他的方法降低数据量）。
 是否返回了不必要的行和列。
 锁或者死锁。
 I/O 吞吐量小，形成了瓶颈效应。
 sp_lock,sp_who,活动的用户查看,原因是读写竞争资源。
22、索引失效的情况有哪些？
 like 以%开头索引无效，当 like 以&结尾，索引有效。
 or 语句前后没有同事使用索引，当且仅当 or 语句查询条件的前后列均为索引时，索引
生效。
 组合索引，使用的不是第一列索引时候，索引失效，即最左匹配规则。
 数据类型出现隐式转换，如 varchar 不加单引号的时候可能会自动转换为 int 类型，这
个时候索引失效。
 在索引列上使用 IS NULL 或者 IS NOT NULL 时候，索引失效，因为索引是不索引空值
得。
 在索引字段上使用，NOT、 <>、！= 、时候是不会使用索引的，对于这样的处理只会进
行全表扫描。
 对索引字段进行计算操作，函数操作时不会使用索引。
 当全表扫描速度比索引速度快的时候不会使用索引。










 corePoolSize 核心线程大小。
 maximumPoolSize 线程池最大线程数量。
 keepAliveTime 空闲线程存活时间。
 unit 空间线程存活时间单位。
 workQueue 工作队列。
 threadFactory 线程工厂。
 handler 拒绝策略。
拒绝策略： 默认丢弃任务抛出异常,  也可以自定义拒绝策略：
ThreadPoolExecutor.AbortPolicy() 丢弃任务，抛出异常
ThreadPoolExecutor.DiscardPolicy() 丢弃任务，不抛出异常
ThreadPoolExecutor.CallerRunsPolicy() 调用执行自己的线程运行任务，也就是直接在调用execute的线程中运行（run方法）
ThreadPoolExecutor.DiscardOldestPolicy() 丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）












 











