Mysql底层是以B+树实现的, 叶子节点存放的是key和value, 非叶子节点存放的是key, 叶子节点之间通过链表连接((双休链表)便于范围查询), 非叶子节点通过指针连接(减少顺序遍历时产生的随机I/O),
hash只适合单行查询, 因为hash表的key和value是放在一起的, 查询的时候, 先通过hash算法定位到key, 然后通过key定位到value,
如果查询的是多行, 则需要遍历整个hash表, 查询效率低, 因此不适合做多行查询. 和范围查询B树和hash表类似, 都是通过hash算法定位到key, 然后通过key定位到value, 不同的是, B树是非叶子
节点存放的是key, 叶子节点存放的是key和value, 因此B树适合做范围查询, 因为B树的非叶子节点存放
的是key, 叶子节点存放的是key和value, 因此通过非叶子节点定位到key, 然后通过key定位到value,这样就可以查询到范围的数据.

B+树是B树的改进版本, 非叶子节点只存放key, 叶子节点存放key和value, 因此B+树适合做多行查询, 因为B+树的非叶子节点存放的是key, 叶子节点存放的是key和value, 因此通过非叶子节点定位
到key, 然后通过key定位到value,这样就可以查询到范围的数据.





MVCC是通过版本链实现的, 版本链记录了事务的修改操作, 每个版本号对应一个版本, 版本号越大, 表示修改的时间越晚, 因此可以实现事务的隔离性.它是通过读取历史版本的数据，来降低并发事务冲突，从而提高并发性能的一种机制
LBCC是通过锁实现的, 锁分为共享锁和排他锁, 共享锁可以同时被多个事务持有, 排他锁只能被一个事务持有, 因此可以实现事务的隔离性.它是通过锁来控制并发事务冲突，从而提高并发性能的一种机制


 undolog回滚事务是通过回滚日志实现的, 回滚日志记录了事务的修改操作, 回滚的时候, 可以根据回滚日志执行回滚操作, 实现事务的回滚.
 undo log是存储在内存中的, redo log是存储在磁盘上的, 因此undo log的读写速度更快, 因此适合做事务的回滚.
 redo log是存储在磁盘上的, 因此适合做事务的提交和持久化.

 



21、如何查询慢 SQL 产生的原因
 分析 SQL 执行计划（explain extended），思考可能的优化点，是否命中索引等。
 没有索引或者没有用到索引(这是查询慢最常见的问题，是程序设计的缺陷)。
 内存不足。
 网络速度慢。
 是否查询出的数据量过大（可以采用多次查询，其他的方法降低数据量）。
 是否返回了不必要的行和列。
 锁或者死锁。
 I/O 吞吐量小，形成了瓶颈效应。
 sp_lock,sp_who,活动的用户查看,原因是读写竞争资源。
22、索引失效的情况有哪些？
 like 以%开头索引无效，当 like 以&结尾，索引有效。
 or 语句前后没有同事使用索引，当且仅当 or 语句查询条件的前后列均为索引时，索引
生效。
 组合索引，使用的不是第一列索引时候，索引失效，即最左匹配规则。
 数据类型出现隐式转换，如 varchar 不加单引号的时候可能会自动转换为 int 类型，这
个时候索引失效。
 在索引列上使用 IS NULL 或者 IS NOT NULL 时候，索引失效，因为索引是不索引空值
得。
 在索引字段上使用，NOT、 <>、！= 、时候是不会使用索引的，对于这样的处理只会进
行全表扫描。
 对索引字段进行计算操作，函数操作时不会使用索引。
 当全表扫描速度比索引速度快的时候不会使用索引。










 corePoolSize 核心线程大小。
 maximumPoolSize 线程池最大线程数量。
 keepAliveTime 空闲线程存活时间。
 unit 空间线程存活时间单位。
 workQueue 工作队列。
 threadFactory 线程工厂。
 handler 拒绝策略。
拒绝策略： 默认丢弃任务抛出异常,  也可以自定义拒绝策略：
ThreadPoolExecutor.AbortPolicy() 丢弃任务，抛出异常
ThreadPoolExecutor.DiscardPolicy() 丢弃任务，不抛出异常
ThreadPoolExecutor.CallerRunsPolicy() 调用执行自己的线程运行任务，也就是直接在调用execute的线程中运行（run方法）
ThreadPoolExecutor.DiscardOldestPolicy() 丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）



Feign 远程调用   - openFeign  -- @EnableFeignClients//开启Fegin
Feign是Spring Cloud 提供的一个声明式的伪http客户端,它使调用远程服务就像调用本地服务一样简单,只需要创建一个接口并添加注解即可。   -- service @FeignClient 声明调用的提供者的name
Nacos很好的兼容了Feign，Feign默认集成了Ribbon,所以在Nacos下使用Feign默认就使用了负载均衡的效果
Feign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成JAVA Bean，放回给调用者。Feign远程调用的基本流程


Feign（ pronounced as \fein\）是一个声明式的、模板化的HTTP客户端，它使得编写Web服务客户端变得更加容易。Feign是由Netflix开源的，旨在简化微服务之间的HTTP请求调用。
在Spring Cloud中，Feign被广泛使用作为服务间调用的主要方式之一。
Feign的核心思想是使用注解来定义客户端的HTTP请求，从而使得开发者能够像调用本地方法一样调用远程服务。它消除了编写冗长的HTTP客户端代码的需求，使得服务间的通信变得更加简洁和直观。

特性
声明式注解：Feign使用Java注解来定义HTTP请求的参数、路径和请求方法，使得开发者可以轻松地构建HTTP请求。
自动序列化/反序列化：Feign自动处理请求和响应的序列化和反序列化，支持多种序列化框架，如Jackson、Gson等。
内置负载均衡：Feign内置了Ribbon负载均衡器，可以根据服务实例的健康状况自动选择合适的实例进行调用。
集成Eureka：Feign可以与Spring Cloud Eureka服务注册与发现中心无缝集成，自动从Eureka中获取服务实例信息。
支持断路器：Feign支持Hystrix断路器，可以在服务调用失败时进行熔断和降级处理，提高系统的稳定性。


Feign的工作流程大致如下：

开发者定义一个Feign客户端接口，使用注解指定服务名、请求方法和参数等信息。
Feign根据接口定义生成一个动态代理，代理实现具体的HTTP请求调用。
当调用Feign客户端接口时，代理会根据接口定义的注解信息构造HTTP请求，并通过底层的HTTP客户端（如Apache HttpClient、OkHttp等）发送请求。
服务器返回响应后，Feign会自动处理响应数据，将响应数据反序列化为Java对象。




 



Feign在SpringCloud中的作用
Feign作为Spring Cloud微服务架构中的一个重要组件，扮演着连接各个服务之间的桥梁角色。下面我们来详细探讨Feign在SpringCloud中的作用。

（1）服务间通信的简化
在分布式系统中，服务之间需要进行频繁的通信。传统的HTTP客户端调用方式需要开发者手动构建HTTP请求、处理响应，并且还要考虑异常情况的处理，这无疑增加了开发的工作量和复杂度。Feign的出现，使得服务间的通信变得异常简单。开发者只需定义一个接口，并使用特定的注解来描述HTTP请求的细节，Feign就可以自动完成底层的HTTP请求调用，极大地简化了服务间的交互过程。

（2）服务调用的抽象化
Feign通过接口加注解的方式，将服务调用的细节抽象出来，使得开发者可以更加专注于业务逻辑的实现。这种抽象化的方式，不仅提高了代码的可读性和可维护性，还使得服务调用的代码更加模块化，便于管理和复用。

（3）集成服务治理与负载均衡
在Spring Cloud中，服务治理和负载均衡是非常重要的概念。Feign与Spring Cloud Eureka和Ribbon负载均衡器无缝集成，可以自动从Eureka服务注册中心获取服务实例信息，并根据负载均衡策略选择合适的服务实例进行调用。这种集成使得服务之间的调用更加智能和高效，同时也提高了系统的可用性和稳定性。

以下是Feign在SpringCloud中的几个关键作用：

服务发现与注册：Feign客户端可以从Eureka服务注册中心获取服务列表，根据服务名自动完成服务实例的寻址。

负载均衡：Feign内置了Ribbon负载均衡器，可以根据服务实例的健康状况和负载情况，动态地选择最合适的服务实例进行调用。

断路器集成：Feign支持Hystrix断路器，可以在服务调用失败时进行熔断和降级处理，防止系统雪崩。

请求重试：Feign支持请求重试机制，可以在请求失败时自动进行重试，提高系统的健壮性。

请求拦截：Feign允许开发者通过自定义拦截器来修改请求和响应，提供了更多的灵活性。

（4）增强微服务的解耦
微服务架构强调服务之间的解耦，Feign通过接口定义和注解的方式，使得服务之间的依赖关系更加清晰，减少了服务之间的耦合度。开发者只需关注接口的定义，而不必关心具体的实现细节，这有助于各个服务独立发展，提高系统的可扩展性。

（5）提高开发效率
Feign的声明式REST客户端特性，使得开发者可以快速地构建服务间的调用逻辑，减少了编写和维护HTTP客户端代码的工作量。这种高效的开发方式，可以显著提高开发效率，缩短项目周期。






SpringBoot解决跨域问题
1.前端通过JSONP解决，只能GET请求，再RESTful风格中比较鸡肋
2.后端可以通过CORS来解决，实现WebMvcConfigurer接口来重新addCorsMappers方法

